/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.my.rdd;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NcdcRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NcdcRecord\",\"namespace\":\"com.my.rdd\",\"fields\":[{\"name\":\"stationId\",\"type\":\"string\"},{\"name\":\"stationName\",\"type\":\"string\"},{\"name\":\"stationCity\",\"type\":\"string\"},{\"name\":\"stationState\",\"type\":\"string\"},{\"name\":\"stationICAO\",\"type\":\"string\"},{\"name\":\"stationLatitude\",\"type\":\"string\"},{\"name\":\"stationLongitude\",\"type\":\"string\"},{\"name\":\"stationElev\",\"type\":\"string\"},{\"name\":\"stationBeginTime\",\"type\":\"string\"},{\"name\":\"stationEndTime\",\"type\":\"string\"},{\"name\":\"year\",\"type\":\"string\"},{\"name\":\"month\",\"type\":\"string\"},{\"name\":\"day\",\"type\":\"string\"},{\"name\":\"meanTemp\",\"type\":\"double\"},{\"name\":\"meanTempCount\",\"type\":\"int\"},{\"name\":\"meanDewPointTemp\",\"type\":\"double\"},{\"name\":\"meanDewPointTempCount\",\"type\":\"int\"},{\"name\":\"meanSeaLevelPressure\",\"type\":\"double\"},{\"name\":\"meanSeaLevelPressureCount\",\"type\":\"int\"},{\"name\":\"meanStationPressure\",\"type\":\"double\"},{\"name\":\"meanStationPressureCount\",\"type\":\"int\"},{\"name\":\"meanVisibility\",\"type\":\"double\"},{\"name\":\"meanVisibilityCount\",\"type\":\"int\"},{\"name\":\"meanWindSpeed\",\"type\":\"double\"},{\"name\":\"meanWindSpeedCount\",\"type\":\"int\"},{\"name\":\"maxSustainedWindSpeed\",\"type\":\"double\"},{\"name\":\"maxGustWindSpeed\",\"type\":\"double\"},{\"name\":\"maxTemp\",\"type\":\"double\"},{\"name\":\"maxTempFlag\",\"type\":\"string\"},{\"name\":\"minTemp\",\"type\":\"double\"},{\"name\":\"minTempFlag\",\"type\":\"string\"},{\"name\":\"totalPrecipitation\",\"type\":\"double\"},{\"name\":\"totalPrecipitationFlag\",\"type\":\"string\"},{\"name\":\"snowDepth\",\"type\":\"double\"},{\"name\":\"hasFog\",\"type\":\"boolean\"},{\"name\":\"hasRain\",\"type\":\"boolean\"},{\"name\":\"hasSnow\",\"type\":\"boolean\"},{\"name\":\"hasHail\",\"type\":\"boolean\"},{\"name\":\"hasThunder\",\"type\":\"boolean\"},{\"name\":\"hasTornado\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence stationId;
  @Deprecated public java.lang.CharSequence stationName;
  @Deprecated public java.lang.CharSequence stationCity;
  @Deprecated public java.lang.CharSequence stationState;
  @Deprecated public java.lang.CharSequence stationICAO;
  @Deprecated public java.lang.CharSequence stationLatitude;
  @Deprecated public java.lang.CharSequence stationLongitude;
  @Deprecated public java.lang.CharSequence stationElev;
  @Deprecated public java.lang.CharSequence stationBeginTime;
  @Deprecated public java.lang.CharSequence stationEndTime;
  @Deprecated public java.lang.CharSequence year;
  @Deprecated public java.lang.CharSequence month;
  @Deprecated public java.lang.CharSequence day;
  @Deprecated public double meanTemp;
  @Deprecated public int meanTempCount;
  @Deprecated public double meanDewPointTemp;
  @Deprecated public int meanDewPointTempCount;
  @Deprecated public double meanSeaLevelPressure;
  @Deprecated public int meanSeaLevelPressureCount;
  @Deprecated public double meanStationPressure;
  @Deprecated public int meanStationPressureCount;
  @Deprecated public double meanVisibility;
  @Deprecated public int meanVisibilityCount;
  @Deprecated public double meanWindSpeed;
  @Deprecated public int meanWindSpeedCount;
  @Deprecated public double maxSustainedWindSpeed;
  @Deprecated public double maxGustWindSpeed;
  @Deprecated public double maxTemp;
  @Deprecated public java.lang.CharSequence maxTempFlag;
  @Deprecated public double minTemp;
  @Deprecated public java.lang.CharSequence minTempFlag;
  @Deprecated public double totalPrecipitation;
  @Deprecated public java.lang.CharSequence totalPrecipitationFlag;
  @Deprecated public double snowDepth;
  @Deprecated public boolean hasFog;
  @Deprecated public boolean hasRain;
  @Deprecated public boolean hasSnow;
  @Deprecated public boolean hasHail;
  @Deprecated public boolean hasThunder;
  @Deprecated public boolean hasTornado;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public NcdcRecord() {}

  /**
   * All-args constructor.
   */
  public NcdcRecord(java.lang.CharSequence stationId, java.lang.CharSequence stationName, java.lang.CharSequence stationCity, java.lang.CharSequence stationState, java.lang.CharSequence stationICAO, java.lang.CharSequence stationLatitude, java.lang.CharSequence stationLongitude, java.lang.CharSequence stationElev, java.lang.CharSequence stationBeginTime, java.lang.CharSequence stationEndTime, java.lang.CharSequence year, java.lang.CharSequence month, java.lang.CharSequence day, java.lang.Double meanTemp, java.lang.Integer meanTempCount, java.lang.Double meanDewPointTemp, java.lang.Integer meanDewPointTempCount, java.lang.Double meanSeaLevelPressure, java.lang.Integer meanSeaLevelPressureCount, java.lang.Double meanStationPressure, java.lang.Integer meanStationPressureCount, java.lang.Double meanVisibility, java.lang.Integer meanVisibilityCount, java.lang.Double meanWindSpeed, java.lang.Integer meanWindSpeedCount, java.lang.Double maxSustainedWindSpeed, java.lang.Double maxGustWindSpeed, java.lang.Double maxTemp, java.lang.CharSequence maxTempFlag, java.lang.Double minTemp, java.lang.CharSequence minTempFlag, java.lang.Double totalPrecipitation, java.lang.CharSequence totalPrecipitationFlag, java.lang.Double snowDepth, java.lang.Boolean hasFog, java.lang.Boolean hasRain, java.lang.Boolean hasSnow, java.lang.Boolean hasHail, java.lang.Boolean hasThunder, java.lang.Boolean hasTornado) {
    this.stationId = stationId;
    this.stationName = stationName;
    this.stationCity = stationCity;
    this.stationState = stationState;
    this.stationICAO = stationICAO;
    this.stationLatitude = stationLatitude;
    this.stationLongitude = stationLongitude;
    this.stationElev = stationElev;
    this.stationBeginTime = stationBeginTime;
    this.stationEndTime = stationEndTime;
    this.year = year;
    this.month = month;
    this.day = day;
    this.meanTemp = meanTemp;
    this.meanTempCount = meanTempCount;
    this.meanDewPointTemp = meanDewPointTemp;
    this.meanDewPointTempCount = meanDewPointTempCount;
    this.meanSeaLevelPressure = meanSeaLevelPressure;
    this.meanSeaLevelPressureCount = meanSeaLevelPressureCount;
    this.meanStationPressure = meanStationPressure;
    this.meanStationPressureCount = meanStationPressureCount;
    this.meanVisibility = meanVisibility;
    this.meanVisibilityCount = meanVisibilityCount;
    this.meanWindSpeed = meanWindSpeed;
    this.meanWindSpeedCount = meanWindSpeedCount;
    this.maxSustainedWindSpeed = maxSustainedWindSpeed;
    this.maxGustWindSpeed = maxGustWindSpeed;
    this.maxTemp = maxTemp;
    this.maxTempFlag = maxTempFlag;
    this.minTemp = minTemp;
    this.minTempFlag = minTempFlag;
    this.totalPrecipitation = totalPrecipitation;
    this.totalPrecipitationFlag = totalPrecipitationFlag;
    this.snowDepth = snowDepth;
    this.hasFog = hasFog;
    this.hasRain = hasRain;
    this.hasSnow = hasSnow;
    this.hasHail = hasHail;
    this.hasThunder = hasThunder;
    this.hasTornado = hasTornado;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationId;
    case 1: return stationName;
    case 2: return stationCity;
    case 3: return stationState;
    case 4: return stationICAO;
    case 5: return stationLatitude;
    case 6: return stationLongitude;
    case 7: return stationElev;
    case 8: return stationBeginTime;
    case 9: return stationEndTime;
    case 10: return year;
    case 11: return month;
    case 12: return day;
    case 13: return meanTemp;
    case 14: return meanTempCount;
    case 15: return meanDewPointTemp;
    case 16: return meanDewPointTempCount;
    case 17: return meanSeaLevelPressure;
    case 18: return meanSeaLevelPressureCount;
    case 19: return meanStationPressure;
    case 20: return meanStationPressureCount;
    case 21: return meanVisibility;
    case 22: return meanVisibilityCount;
    case 23: return meanWindSpeed;
    case 24: return meanWindSpeedCount;
    case 25: return maxSustainedWindSpeed;
    case 26: return maxGustWindSpeed;
    case 27: return maxTemp;
    case 28: return maxTempFlag;
    case 29: return minTemp;
    case 30: return minTempFlag;
    case 31: return totalPrecipitation;
    case 32: return totalPrecipitationFlag;
    case 33: return snowDepth;
    case 34: return hasFog;
    case 35: return hasRain;
    case 36: return hasSnow;
    case 37: return hasHail;
    case 38: return hasThunder;
    case 39: return hasTornado;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationId = (java.lang.CharSequence)value$; break;
    case 1: stationName = (java.lang.CharSequence)value$; break;
    case 2: stationCity = (java.lang.CharSequence)value$; break;
    case 3: stationState = (java.lang.CharSequence)value$; break;
    case 4: stationICAO = (java.lang.CharSequence)value$; break;
    case 5: stationLatitude = (java.lang.CharSequence)value$; break;
    case 6: stationLongitude = (java.lang.CharSequence)value$; break;
    case 7: stationElev = (java.lang.CharSequence)value$; break;
    case 8: stationBeginTime = (java.lang.CharSequence)value$; break;
    case 9: stationEndTime = (java.lang.CharSequence)value$; break;
    case 10: year = (java.lang.CharSequence)value$; break;
    case 11: month = (java.lang.CharSequence)value$; break;
    case 12: day = (java.lang.CharSequence)value$; break;
    case 13: meanTemp = (java.lang.Double)value$; break;
    case 14: meanTempCount = (java.lang.Integer)value$; break;
    case 15: meanDewPointTemp = (java.lang.Double)value$; break;
    case 16: meanDewPointTempCount = (java.lang.Integer)value$; break;
    case 17: meanSeaLevelPressure = (java.lang.Double)value$; break;
    case 18: meanSeaLevelPressureCount = (java.lang.Integer)value$; break;
    case 19: meanStationPressure = (java.lang.Double)value$; break;
    case 20: meanStationPressureCount = (java.lang.Integer)value$; break;
    case 21: meanVisibility = (java.lang.Double)value$; break;
    case 22: meanVisibilityCount = (java.lang.Integer)value$; break;
    case 23: meanWindSpeed = (java.lang.Double)value$; break;
    case 24: meanWindSpeedCount = (java.lang.Integer)value$; break;
    case 25: maxSustainedWindSpeed = (java.lang.Double)value$; break;
    case 26: maxGustWindSpeed = (java.lang.Double)value$; break;
    case 27: maxTemp = (java.lang.Double)value$; break;
    case 28: maxTempFlag = (java.lang.CharSequence)value$; break;
    case 29: minTemp = (java.lang.Double)value$; break;
    case 30: minTempFlag = (java.lang.CharSequence)value$; break;
    case 31: totalPrecipitation = (java.lang.Double)value$; break;
    case 32: totalPrecipitationFlag = (java.lang.CharSequence)value$; break;
    case 33: snowDepth = (java.lang.Double)value$; break;
    case 34: hasFog = (java.lang.Boolean)value$; break;
    case 35: hasRain = (java.lang.Boolean)value$; break;
    case 36: hasSnow = (java.lang.Boolean)value$; break;
    case 37: hasHail = (java.lang.Boolean)value$; break;
    case 38: hasThunder = (java.lang.Boolean)value$; break;
    case 39: hasTornado = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stationId' field.
   */
  public java.lang.CharSequence getStationId() {
    return stationId;
  }

  /**
   * Sets the value of the 'stationId' field.
   * @param value the value to set.
   */
  public void setStationId(java.lang.CharSequence value) {
    this.stationId = value;
  }

  /**
   * Gets the value of the 'stationName' field.
   */
  public java.lang.CharSequence getStationName() {
    return stationName;
  }

  /**
   * Sets the value of the 'stationName' field.
   * @param value the value to set.
   */
  public void setStationName(java.lang.CharSequence value) {
    this.stationName = value;
  }

  /**
   * Gets the value of the 'stationCity' field.
   */
  public java.lang.CharSequence getStationCity() {
    return stationCity;
  }

  /**
   * Sets the value of the 'stationCity' field.
   * @param value the value to set.
   */
  public void setStationCity(java.lang.CharSequence value) {
    this.stationCity = value;
  }

  /**
   * Gets the value of the 'stationState' field.
   */
  public java.lang.CharSequence getStationState() {
    return stationState;
  }

  /**
   * Sets the value of the 'stationState' field.
   * @param value the value to set.
   */
  public void setStationState(java.lang.CharSequence value) {
    this.stationState = value;
  }

  /**
   * Gets the value of the 'stationICAO' field.
   */
  public java.lang.CharSequence getStationICAO() {
    return stationICAO;
  }

  /**
   * Sets the value of the 'stationICAO' field.
   * @param value the value to set.
   */
  public void setStationICAO(java.lang.CharSequence value) {
    this.stationICAO = value;
  }

  /**
   * Gets the value of the 'stationLatitude' field.
   */
  public java.lang.CharSequence getStationLatitude() {
    return stationLatitude;
  }

  /**
   * Sets the value of the 'stationLatitude' field.
   * @param value the value to set.
   */
  public void setStationLatitude(java.lang.CharSequence value) {
    this.stationLatitude = value;
  }

  /**
   * Gets the value of the 'stationLongitude' field.
   */
  public java.lang.CharSequence getStationLongitude() {
    return stationLongitude;
  }

  /**
   * Sets the value of the 'stationLongitude' field.
   * @param value the value to set.
   */
  public void setStationLongitude(java.lang.CharSequence value) {
    this.stationLongitude = value;
  }

  /**
   * Gets the value of the 'stationElev' field.
   */
  public java.lang.CharSequence getStationElev() {
    return stationElev;
  }

  /**
   * Sets the value of the 'stationElev' field.
   * @param value the value to set.
   */
  public void setStationElev(java.lang.CharSequence value) {
    this.stationElev = value;
  }

  /**
   * Gets the value of the 'stationBeginTime' field.
   */
  public java.lang.CharSequence getStationBeginTime() {
    return stationBeginTime;
  }

  /**
   * Sets the value of the 'stationBeginTime' field.
   * @param value the value to set.
   */
  public void setStationBeginTime(java.lang.CharSequence value) {
    this.stationBeginTime = value;
  }

  /**
   * Gets the value of the 'stationEndTime' field.
   */
  public java.lang.CharSequence getStationEndTime() {
    return stationEndTime;
  }

  /**
   * Sets the value of the 'stationEndTime' field.
   * @param value the value to set.
   */
  public void setStationEndTime(java.lang.CharSequence value) {
    this.stationEndTime = value;
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.CharSequence getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.CharSequence value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'month' field.
   */
  public java.lang.CharSequence getMonth() {
    return month;
  }

  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.CharSequence value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'day' field.
   */
  public java.lang.CharSequence getDay() {
    return day;
  }

  /**
   * Sets the value of the 'day' field.
   * @param value the value to set.
   */
  public void setDay(java.lang.CharSequence value) {
    this.day = value;
  }

  /**
   * Gets the value of the 'meanTemp' field.
   */
  public java.lang.Double getMeanTemp() {
    return meanTemp;
  }

  /**
   * Sets the value of the 'meanTemp' field.
   * @param value the value to set.
   */
  public void setMeanTemp(java.lang.Double value) {
    this.meanTemp = value;
  }

  /**
   * Gets the value of the 'meanTempCount' field.
   */
  public java.lang.Integer getMeanTempCount() {
    return meanTempCount;
  }

  /**
   * Sets the value of the 'meanTempCount' field.
   * @param value the value to set.
   */
  public void setMeanTempCount(java.lang.Integer value) {
    this.meanTempCount = value;
  }

  /**
   * Gets the value of the 'meanDewPointTemp' field.
   */
  public java.lang.Double getMeanDewPointTemp() {
    return meanDewPointTemp;
  }

  /**
   * Sets the value of the 'meanDewPointTemp' field.
   * @param value the value to set.
   */
  public void setMeanDewPointTemp(java.lang.Double value) {
    this.meanDewPointTemp = value;
  }

  /**
   * Gets the value of the 'meanDewPointTempCount' field.
   */
  public java.lang.Integer getMeanDewPointTempCount() {
    return meanDewPointTempCount;
  }

  /**
   * Sets the value of the 'meanDewPointTempCount' field.
   * @param value the value to set.
   */
  public void setMeanDewPointTempCount(java.lang.Integer value) {
    this.meanDewPointTempCount = value;
  }

  /**
   * Gets the value of the 'meanSeaLevelPressure' field.
   */
  public java.lang.Double getMeanSeaLevelPressure() {
    return meanSeaLevelPressure;
  }

  /**
   * Sets the value of the 'meanSeaLevelPressure' field.
   * @param value the value to set.
   */
  public void setMeanSeaLevelPressure(java.lang.Double value) {
    this.meanSeaLevelPressure = value;
  }

  /**
   * Gets the value of the 'meanSeaLevelPressureCount' field.
   */
  public java.lang.Integer getMeanSeaLevelPressureCount() {
    return meanSeaLevelPressureCount;
  }

  /**
   * Sets the value of the 'meanSeaLevelPressureCount' field.
   * @param value the value to set.
   */
  public void setMeanSeaLevelPressureCount(java.lang.Integer value) {
    this.meanSeaLevelPressureCount = value;
  }

  /**
   * Gets the value of the 'meanStationPressure' field.
   */
  public java.lang.Double getMeanStationPressure() {
    return meanStationPressure;
  }

  /**
   * Sets the value of the 'meanStationPressure' field.
   * @param value the value to set.
   */
  public void setMeanStationPressure(java.lang.Double value) {
    this.meanStationPressure = value;
  }

  /**
   * Gets the value of the 'meanStationPressureCount' field.
   */
  public java.lang.Integer getMeanStationPressureCount() {
    return meanStationPressureCount;
  }

  /**
   * Sets the value of the 'meanStationPressureCount' field.
   * @param value the value to set.
   */
  public void setMeanStationPressureCount(java.lang.Integer value) {
    this.meanStationPressureCount = value;
  }

  /**
   * Gets the value of the 'meanVisibility' field.
   */
  public java.lang.Double getMeanVisibility() {
    return meanVisibility;
  }

  /**
   * Sets the value of the 'meanVisibility' field.
   * @param value the value to set.
   */
  public void setMeanVisibility(java.lang.Double value) {
    this.meanVisibility = value;
  }

  /**
   * Gets the value of the 'meanVisibilityCount' field.
   */
  public java.lang.Integer getMeanVisibilityCount() {
    return meanVisibilityCount;
  }

  /**
   * Sets the value of the 'meanVisibilityCount' field.
   * @param value the value to set.
   */
  public void setMeanVisibilityCount(java.lang.Integer value) {
    this.meanVisibilityCount = value;
  }

  /**
   * Gets the value of the 'meanWindSpeed' field.
   */
  public java.lang.Double getMeanWindSpeed() {
    return meanWindSpeed;
  }

  /**
   * Sets the value of the 'meanWindSpeed' field.
   * @param value the value to set.
   */
  public void setMeanWindSpeed(java.lang.Double value) {
    this.meanWindSpeed = value;
  }

  /**
   * Gets the value of the 'meanWindSpeedCount' field.
   */
  public java.lang.Integer getMeanWindSpeedCount() {
    return meanWindSpeedCount;
  }

  /**
   * Sets the value of the 'meanWindSpeedCount' field.
   * @param value the value to set.
   */
  public void setMeanWindSpeedCount(java.lang.Integer value) {
    this.meanWindSpeedCount = value;
  }

  /**
   * Gets the value of the 'maxSustainedWindSpeed' field.
   */
  public java.lang.Double getMaxSustainedWindSpeed() {
    return maxSustainedWindSpeed;
  }

  /**
   * Sets the value of the 'maxSustainedWindSpeed' field.
   * @param value the value to set.
   */
  public void setMaxSustainedWindSpeed(java.lang.Double value) {
    this.maxSustainedWindSpeed = value;
  }

  /**
   * Gets the value of the 'maxGustWindSpeed' field.
   */
  public java.lang.Double getMaxGustWindSpeed() {
    return maxGustWindSpeed;
  }

  /**
   * Sets the value of the 'maxGustWindSpeed' field.
   * @param value the value to set.
   */
  public void setMaxGustWindSpeed(java.lang.Double value) {
    this.maxGustWindSpeed = value;
  }

  /**
   * Gets the value of the 'maxTemp' field.
   */
  public java.lang.Double getMaxTemp() {
    return maxTemp;
  }

  /**
   * Sets the value of the 'maxTemp' field.
   * @param value the value to set.
   */
  public void setMaxTemp(java.lang.Double value) {
    this.maxTemp = value;
  }

  /**
   * Gets the value of the 'maxTempFlag' field.
   */
  public java.lang.CharSequence getMaxTempFlag() {
    return maxTempFlag;
  }

  /**
   * Sets the value of the 'maxTempFlag' field.
   * @param value the value to set.
   */
  public void setMaxTempFlag(java.lang.CharSequence value) {
    this.maxTempFlag = value;
  }

  /**
   * Gets the value of the 'minTemp' field.
   */
  public java.lang.Double getMinTemp() {
    return minTemp;
  }

  /**
   * Sets the value of the 'minTemp' field.
   * @param value the value to set.
   */
  public void setMinTemp(java.lang.Double value) {
    this.minTemp = value;
  }

  /**
   * Gets the value of the 'minTempFlag' field.
   */
  public java.lang.CharSequence getMinTempFlag() {
    return minTempFlag;
  }

  /**
   * Sets the value of the 'minTempFlag' field.
   * @param value the value to set.
   */
  public void setMinTempFlag(java.lang.CharSequence value) {
    this.minTempFlag = value;
  }

  /**
   * Gets the value of the 'totalPrecipitation' field.
   */
  public java.lang.Double getTotalPrecipitation() {
    return totalPrecipitation;
  }

  /**
   * Sets the value of the 'totalPrecipitation' field.
   * @param value the value to set.
   */
  public void setTotalPrecipitation(java.lang.Double value) {
    this.totalPrecipitation = value;
  }

  /**
   * Gets the value of the 'totalPrecipitationFlag' field.
   */
  public java.lang.CharSequence getTotalPrecipitationFlag() {
    return totalPrecipitationFlag;
  }

  /**
   * Sets the value of the 'totalPrecipitationFlag' field.
   * @param value the value to set.
   */
  public void setTotalPrecipitationFlag(java.lang.CharSequence value) {
    this.totalPrecipitationFlag = value;
  }

  /**
   * Gets the value of the 'snowDepth' field.
   */
  public java.lang.Double getSnowDepth() {
    return snowDepth;
  }

  /**
   * Sets the value of the 'snowDepth' field.
   * @param value the value to set.
   */
  public void setSnowDepth(java.lang.Double value) {
    this.snowDepth = value;
  }

  /**
   * Gets the value of the 'hasFog' field.
   */
  public java.lang.Boolean getHasFog() {
    return hasFog;
  }

  /**
   * Sets the value of the 'hasFog' field.
   * @param value the value to set.
   */
  public void setHasFog(java.lang.Boolean value) {
    this.hasFog = value;
  }

  /**
   * Gets the value of the 'hasRain' field.
   */
  public java.lang.Boolean getHasRain() {
    return hasRain;
  }

  /**
   * Sets the value of the 'hasRain' field.
   * @param value the value to set.
   */
  public void setHasRain(java.lang.Boolean value) {
    this.hasRain = value;
  }

  /**
   * Gets the value of the 'hasSnow' field.
   */
  public java.lang.Boolean getHasSnow() {
    return hasSnow;
  }

  /**
   * Sets the value of the 'hasSnow' field.
   * @param value the value to set.
   */
  public void setHasSnow(java.lang.Boolean value) {
    this.hasSnow = value;
  }

  /**
   * Gets the value of the 'hasHail' field.
   */
  public java.lang.Boolean getHasHail() {
    return hasHail;
  }

  /**
   * Sets the value of the 'hasHail' field.
   * @param value the value to set.
   */
  public void setHasHail(java.lang.Boolean value) {
    this.hasHail = value;
  }

  /**
   * Gets the value of the 'hasThunder' field.
   */
  public java.lang.Boolean getHasThunder() {
    return hasThunder;
  }

  /**
   * Sets the value of the 'hasThunder' field.
   * @param value the value to set.
   */
  public void setHasThunder(java.lang.Boolean value) {
    this.hasThunder = value;
  }

  /**
   * Gets the value of the 'hasTornado' field.
   */
  public java.lang.Boolean getHasTornado() {
    return hasTornado;
  }

  /**
   * Sets the value of the 'hasTornado' field.
   * @param value the value to set.
   */
  public void setHasTornado(java.lang.Boolean value) {
    this.hasTornado = value;
  }

  /** Creates a new NcdcRecord RecordBuilder */
  public static com.my.rdd.NcdcRecord.Builder newBuilder() {
    return new com.my.rdd.NcdcRecord.Builder();
  }
  
  /** Creates a new NcdcRecord RecordBuilder by copying an existing Builder */
  public static com.my.rdd.NcdcRecord.Builder newBuilder(com.my.rdd.NcdcRecord.Builder other) {
    return new com.my.rdd.NcdcRecord.Builder(other);
  }
  
  /** Creates a new NcdcRecord RecordBuilder by copying an existing NcdcRecord instance */
  public static com.my.rdd.NcdcRecord.Builder newBuilder(com.my.rdd.NcdcRecord other) {
    return new com.my.rdd.NcdcRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for NcdcRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NcdcRecord>
    implements org.apache.avro.data.RecordBuilder<NcdcRecord> {

    private java.lang.CharSequence stationId;
    private java.lang.CharSequence stationName;
    private java.lang.CharSequence stationCity;
    private java.lang.CharSequence stationState;
    private java.lang.CharSequence stationICAO;
    private java.lang.CharSequence stationLatitude;
    private java.lang.CharSequence stationLongitude;
    private java.lang.CharSequence stationElev;
    private java.lang.CharSequence stationBeginTime;
    private java.lang.CharSequence stationEndTime;
    private java.lang.CharSequence year;
    private java.lang.CharSequence month;
    private java.lang.CharSequence day;
    private double meanTemp;
    private int meanTempCount;
    private double meanDewPointTemp;
    private int meanDewPointTempCount;
    private double meanSeaLevelPressure;
    private int meanSeaLevelPressureCount;
    private double meanStationPressure;
    private int meanStationPressureCount;
    private double meanVisibility;
    private int meanVisibilityCount;
    private double meanWindSpeed;
    private int meanWindSpeedCount;
    private double maxSustainedWindSpeed;
    private double maxGustWindSpeed;
    private double maxTemp;
    private java.lang.CharSequence maxTempFlag;
    private double minTemp;
    private java.lang.CharSequence minTempFlag;
    private double totalPrecipitation;
    private java.lang.CharSequence totalPrecipitationFlag;
    private double snowDepth;
    private boolean hasFog;
    private boolean hasRain;
    private boolean hasSnow;
    private boolean hasHail;
    private boolean hasThunder;
    private boolean hasTornado;

    /** Creates a new Builder */
    private Builder() {
      super(com.my.rdd.NcdcRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.my.rdd.NcdcRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationId)) {
        this.stationId = data().deepCopy(fields()[0].schema(), other.stationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stationName)) {
        this.stationName = data().deepCopy(fields()[1].schema(), other.stationName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stationCity)) {
        this.stationCity = data().deepCopy(fields()[2].schema(), other.stationCity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stationState)) {
        this.stationState = data().deepCopy(fields()[3].schema(), other.stationState);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stationICAO)) {
        this.stationICAO = data().deepCopy(fields()[4].schema(), other.stationICAO);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stationLatitude)) {
        this.stationLatitude = data().deepCopy(fields()[5].schema(), other.stationLatitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stationLongitude)) {
        this.stationLongitude = data().deepCopy(fields()[6].schema(), other.stationLongitude);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.stationElev)) {
        this.stationElev = data().deepCopy(fields()[7].schema(), other.stationElev);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.stationBeginTime)) {
        this.stationBeginTime = data().deepCopy(fields()[8].schema(), other.stationBeginTime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.stationEndTime)) {
        this.stationEndTime = data().deepCopy(fields()[9].schema(), other.stationEndTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.year)) {
        this.year = data().deepCopy(fields()[10].schema(), other.year);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.month)) {
        this.month = data().deepCopy(fields()[11].schema(), other.month);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.day)) {
        this.day = data().deepCopy(fields()[12].schema(), other.day);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.meanTemp)) {
        this.meanTemp = data().deepCopy(fields()[13].schema(), other.meanTemp);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.meanTempCount)) {
        this.meanTempCount = data().deepCopy(fields()[14].schema(), other.meanTempCount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.meanDewPointTemp)) {
        this.meanDewPointTemp = data().deepCopy(fields()[15].schema(), other.meanDewPointTemp);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.meanDewPointTempCount)) {
        this.meanDewPointTempCount = data().deepCopy(fields()[16].schema(), other.meanDewPointTempCount);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.meanSeaLevelPressure)) {
        this.meanSeaLevelPressure = data().deepCopy(fields()[17].schema(), other.meanSeaLevelPressure);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.meanSeaLevelPressureCount)) {
        this.meanSeaLevelPressureCount = data().deepCopy(fields()[18].schema(), other.meanSeaLevelPressureCount);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.meanStationPressure)) {
        this.meanStationPressure = data().deepCopy(fields()[19].schema(), other.meanStationPressure);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.meanStationPressureCount)) {
        this.meanStationPressureCount = data().deepCopy(fields()[20].schema(), other.meanStationPressureCount);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.meanVisibility)) {
        this.meanVisibility = data().deepCopy(fields()[21].schema(), other.meanVisibility);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.meanVisibilityCount)) {
        this.meanVisibilityCount = data().deepCopy(fields()[22].schema(), other.meanVisibilityCount);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.meanWindSpeed)) {
        this.meanWindSpeed = data().deepCopy(fields()[23].schema(), other.meanWindSpeed);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.meanWindSpeedCount)) {
        this.meanWindSpeedCount = data().deepCopy(fields()[24].schema(), other.meanWindSpeedCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.maxSustainedWindSpeed)) {
        this.maxSustainedWindSpeed = data().deepCopy(fields()[25].schema(), other.maxSustainedWindSpeed);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.maxGustWindSpeed)) {
        this.maxGustWindSpeed = data().deepCopy(fields()[26].schema(), other.maxGustWindSpeed);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.maxTemp)) {
        this.maxTemp = data().deepCopy(fields()[27].schema(), other.maxTemp);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.maxTempFlag)) {
        this.maxTempFlag = data().deepCopy(fields()[28].schema(), other.maxTempFlag);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.minTemp)) {
        this.minTemp = data().deepCopy(fields()[29].schema(), other.minTemp);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.minTempFlag)) {
        this.minTempFlag = data().deepCopy(fields()[30].schema(), other.minTempFlag);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.totalPrecipitation)) {
        this.totalPrecipitation = data().deepCopy(fields()[31].schema(), other.totalPrecipitation);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.totalPrecipitationFlag)) {
        this.totalPrecipitationFlag = data().deepCopy(fields()[32].schema(), other.totalPrecipitationFlag);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.snowDepth)) {
        this.snowDepth = data().deepCopy(fields()[33].schema(), other.snowDepth);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.hasFog)) {
        this.hasFog = data().deepCopy(fields()[34].schema(), other.hasFog);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.hasRain)) {
        this.hasRain = data().deepCopy(fields()[35].schema(), other.hasRain);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.hasSnow)) {
        this.hasSnow = data().deepCopy(fields()[36].schema(), other.hasSnow);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.hasHail)) {
        this.hasHail = data().deepCopy(fields()[37].schema(), other.hasHail);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.hasThunder)) {
        this.hasThunder = data().deepCopy(fields()[38].schema(), other.hasThunder);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.hasTornado)) {
        this.hasTornado = data().deepCopy(fields()[39].schema(), other.hasTornado);
        fieldSetFlags()[39] = true;
      }
    }
    
    /** Creates a Builder by copying an existing NcdcRecord instance */
    private Builder(com.my.rdd.NcdcRecord other) {
            super(com.my.rdd.NcdcRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.stationId)) {
        this.stationId = data().deepCopy(fields()[0].schema(), other.stationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stationName)) {
        this.stationName = data().deepCopy(fields()[1].schema(), other.stationName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stationCity)) {
        this.stationCity = data().deepCopy(fields()[2].schema(), other.stationCity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stationState)) {
        this.stationState = data().deepCopy(fields()[3].schema(), other.stationState);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stationICAO)) {
        this.stationICAO = data().deepCopy(fields()[4].schema(), other.stationICAO);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stationLatitude)) {
        this.stationLatitude = data().deepCopy(fields()[5].schema(), other.stationLatitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stationLongitude)) {
        this.stationLongitude = data().deepCopy(fields()[6].schema(), other.stationLongitude);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.stationElev)) {
        this.stationElev = data().deepCopy(fields()[7].schema(), other.stationElev);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.stationBeginTime)) {
        this.stationBeginTime = data().deepCopy(fields()[8].schema(), other.stationBeginTime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.stationEndTime)) {
        this.stationEndTime = data().deepCopy(fields()[9].schema(), other.stationEndTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.year)) {
        this.year = data().deepCopy(fields()[10].schema(), other.year);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.month)) {
        this.month = data().deepCopy(fields()[11].schema(), other.month);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.day)) {
        this.day = data().deepCopy(fields()[12].schema(), other.day);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.meanTemp)) {
        this.meanTemp = data().deepCopy(fields()[13].schema(), other.meanTemp);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.meanTempCount)) {
        this.meanTempCount = data().deepCopy(fields()[14].schema(), other.meanTempCount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.meanDewPointTemp)) {
        this.meanDewPointTemp = data().deepCopy(fields()[15].schema(), other.meanDewPointTemp);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.meanDewPointTempCount)) {
        this.meanDewPointTempCount = data().deepCopy(fields()[16].schema(), other.meanDewPointTempCount);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.meanSeaLevelPressure)) {
        this.meanSeaLevelPressure = data().deepCopy(fields()[17].schema(), other.meanSeaLevelPressure);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.meanSeaLevelPressureCount)) {
        this.meanSeaLevelPressureCount = data().deepCopy(fields()[18].schema(), other.meanSeaLevelPressureCount);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.meanStationPressure)) {
        this.meanStationPressure = data().deepCopy(fields()[19].schema(), other.meanStationPressure);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.meanStationPressureCount)) {
        this.meanStationPressureCount = data().deepCopy(fields()[20].schema(), other.meanStationPressureCount);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.meanVisibility)) {
        this.meanVisibility = data().deepCopy(fields()[21].schema(), other.meanVisibility);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.meanVisibilityCount)) {
        this.meanVisibilityCount = data().deepCopy(fields()[22].schema(), other.meanVisibilityCount);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.meanWindSpeed)) {
        this.meanWindSpeed = data().deepCopy(fields()[23].schema(), other.meanWindSpeed);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.meanWindSpeedCount)) {
        this.meanWindSpeedCount = data().deepCopy(fields()[24].schema(), other.meanWindSpeedCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.maxSustainedWindSpeed)) {
        this.maxSustainedWindSpeed = data().deepCopy(fields()[25].schema(), other.maxSustainedWindSpeed);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.maxGustWindSpeed)) {
        this.maxGustWindSpeed = data().deepCopy(fields()[26].schema(), other.maxGustWindSpeed);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.maxTemp)) {
        this.maxTemp = data().deepCopy(fields()[27].schema(), other.maxTemp);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.maxTempFlag)) {
        this.maxTempFlag = data().deepCopy(fields()[28].schema(), other.maxTempFlag);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.minTemp)) {
        this.minTemp = data().deepCopy(fields()[29].schema(), other.minTemp);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.minTempFlag)) {
        this.minTempFlag = data().deepCopy(fields()[30].schema(), other.minTempFlag);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.totalPrecipitation)) {
        this.totalPrecipitation = data().deepCopy(fields()[31].schema(), other.totalPrecipitation);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.totalPrecipitationFlag)) {
        this.totalPrecipitationFlag = data().deepCopy(fields()[32].schema(), other.totalPrecipitationFlag);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.snowDepth)) {
        this.snowDepth = data().deepCopy(fields()[33].schema(), other.snowDepth);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.hasFog)) {
        this.hasFog = data().deepCopy(fields()[34].schema(), other.hasFog);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.hasRain)) {
        this.hasRain = data().deepCopy(fields()[35].schema(), other.hasRain);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.hasSnow)) {
        this.hasSnow = data().deepCopy(fields()[36].schema(), other.hasSnow);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.hasHail)) {
        this.hasHail = data().deepCopy(fields()[37].schema(), other.hasHail);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.hasThunder)) {
        this.hasThunder = data().deepCopy(fields()[38].schema(), other.hasThunder);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.hasTornado)) {
        this.hasTornado = data().deepCopy(fields()[39].schema(), other.hasTornado);
        fieldSetFlags()[39] = true;
      }
    }

    /** Gets the value of the 'stationId' field */
    public java.lang.CharSequence getStationId() {
      return stationId;
    }
    
    /** Sets the value of the 'stationId' field */
    public com.my.rdd.NcdcRecord.Builder setStationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.stationId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'stationId' field has been set */
    public boolean hasStationId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'stationId' field */
    public com.my.rdd.NcdcRecord.Builder clearStationId() {
      stationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'stationName' field */
    public java.lang.CharSequence getStationName() {
      return stationName;
    }
    
    /** Sets the value of the 'stationName' field */
    public com.my.rdd.NcdcRecord.Builder setStationName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.stationName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'stationName' field has been set */
    public boolean hasStationName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'stationName' field */
    public com.my.rdd.NcdcRecord.Builder clearStationName() {
      stationName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'stationCity' field */
    public java.lang.CharSequence getStationCity() {
      return stationCity;
    }
    
    /** Sets the value of the 'stationCity' field */
    public com.my.rdd.NcdcRecord.Builder setStationCity(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.stationCity = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'stationCity' field has been set */
    public boolean hasStationCity() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'stationCity' field */
    public com.my.rdd.NcdcRecord.Builder clearStationCity() {
      stationCity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'stationState' field */
    public java.lang.CharSequence getStationState() {
      return stationState;
    }
    
    /** Sets the value of the 'stationState' field */
    public com.my.rdd.NcdcRecord.Builder setStationState(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.stationState = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'stationState' field has been set */
    public boolean hasStationState() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'stationState' field */
    public com.my.rdd.NcdcRecord.Builder clearStationState() {
      stationState = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'stationICAO' field */
    public java.lang.CharSequence getStationICAO() {
      return stationICAO;
    }
    
    /** Sets the value of the 'stationICAO' field */
    public com.my.rdd.NcdcRecord.Builder setStationICAO(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.stationICAO = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'stationICAO' field has been set */
    public boolean hasStationICAO() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'stationICAO' field */
    public com.my.rdd.NcdcRecord.Builder clearStationICAO() {
      stationICAO = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'stationLatitude' field */
    public java.lang.CharSequence getStationLatitude() {
      return stationLatitude;
    }
    
    /** Sets the value of the 'stationLatitude' field */
    public com.my.rdd.NcdcRecord.Builder setStationLatitude(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.stationLatitude = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'stationLatitude' field has been set */
    public boolean hasStationLatitude() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'stationLatitude' field */
    public com.my.rdd.NcdcRecord.Builder clearStationLatitude() {
      stationLatitude = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'stationLongitude' field */
    public java.lang.CharSequence getStationLongitude() {
      return stationLongitude;
    }
    
    /** Sets the value of the 'stationLongitude' field */
    public com.my.rdd.NcdcRecord.Builder setStationLongitude(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.stationLongitude = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'stationLongitude' field has been set */
    public boolean hasStationLongitude() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'stationLongitude' field */
    public com.my.rdd.NcdcRecord.Builder clearStationLongitude() {
      stationLongitude = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'stationElev' field */
    public java.lang.CharSequence getStationElev() {
      return stationElev;
    }
    
    /** Sets the value of the 'stationElev' field */
    public com.my.rdd.NcdcRecord.Builder setStationElev(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.stationElev = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'stationElev' field has been set */
    public boolean hasStationElev() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'stationElev' field */
    public com.my.rdd.NcdcRecord.Builder clearStationElev() {
      stationElev = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'stationBeginTime' field */
    public java.lang.CharSequence getStationBeginTime() {
      return stationBeginTime;
    }
    
    /** Sets the value of the 'stationBeginTime' field */
    public com.my.rdd.NcdcRecord.Builder setStationBeginTime(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.stationBeginTime = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'stationBeginTime' field has been set */
    public boolean hasStationBeginTime() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'stationBeginTime' field */
    public com.my.rdd.NcdcRecord.Builder clearStationBeginTime() {
      stationBeginTime = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'stationEndTime' field */
    public java.lang.CharSequence getStationEndTime() {
      return stationEndTime;
    }
    
    /** Sets the value of the 'stationEndTime' field */
    public com.my.rdd.NcdcRecord.Builder setStationEndTime(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.stationEndTime = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'stationEndTime' field has been set */
    public boolean hasStationEndTime() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'stationEndTime' field */
    public com.my.rdd.NcdcRecord.Builder clearStationEndTime() {
      stationEndTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public java.lang.CharSequence getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public com.my.rdd.NcdcRecord.Builder setYear(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.year = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'year' field */
    public com.my.rdd.NcdcRecord.Builder clearYear() {
      year = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'month' field */
    public java.lang.CharSequence getMonth() {
      return month;
    }
    
    /** Sets the value of the 'month' field */
    public com.my.rdd.NcdcRecord.Builder setMonth(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.month = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'month' field has been set */
    public boolean hasMonth() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'month' field */
    public com.my.rdd.NcdcRecord.Builder clearMonth() {
      month = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'day' field */
    public java.lang.CharSequence getDay() {
      return day;
    }
    
    /** Sets the value of the 'day' field */
    public com.my.rdd.NcdcRecord.Builder setDay(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.day = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'day' field has been set */
    public boolean hasDay() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'day' field */
    public com.my.rdd.NcdcRecord.Builder clearDay() {
      day = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'meanTemp' field */
    public java.lang.Double getMeanTemp() {
      return meanTemp;
    }
    
    /** Sets the value of the 'meanTemp' field */
    public com.my.rdd.NcdcRecord.Builder setMeanTemp(double value) {
      validate(fields()[13], value);
      this.meanTemp = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'meanTemp' field has been set */
    public boolean hasMeanTemp() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'meanTemp' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanTemp() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'meanTempCount' field */
    public java.lang.Integer getMeanTempCount() {
      return meanTempCount;
    }
    
    /** Sets the value of the 'meanTempCount' field */
    public com.my.rdd.NcdcRecord.Builder setMeanTempCount(int value) {
      validate(fields()[14], value);
      this.meanTempCount = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'meanTempCount' field has been set */
    public boolean hasMeanTempCount() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'meanTempCount' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanTempCount() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'meanDewPointTemp' field */
    public java.lang.Double getMeanDewPointTemp() {
      return meanDewPointTemp;
    }
    
    /** Sets the value of the 'meanDewPointTemp' field */
    public com.my.rdd.NcdcRecord.Builder setMeanDewPointTemp(double value) {
      validate(fields()[15], value);
      this.meanDewPointTemp = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'meanDewPointTemp' field has been set */
    public boolean hasMeanDewPointTemp() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'meanDewPointTemp' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanDewPointTemp() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'meanDewPointTempCount' field */
    public java.lang.Integer getMeanDewPointTempCount() {
      return meanDewPointTempCount;
    }
    
    /** Sets the value of the 'meanDewPointTempCount' field */
    public com.my.rdd.NcdcRecord.Builder setMeanDewPointTempCount(int value) {
      validate(fields()[16], value);
      this.meanDewPointTempCount = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'meanDewPointTempCount' field has been set */
    public boolean hasMeanDewPointTempCount() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'meanDewPointTempCount' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanDewPointTempCount() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'meanSeaLevelPressure' field */
    public java.lang.Double getMeanSeaLevelPressure() {
      return meanSeaLevelPressure;
    }
    
    /** Sets the value of the 'meanSeaLevelPressure' field */
    public com.my.rdd.NcdcRecord.Builder setMeanSeaLevelPressure(double value) {
      validate(fields()[17], value);
      this.meanSeaLevelPressure = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'meanSeaLevelPressure' field has been set */
    public boolean hasMeanSeaLevelPressure() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'meanSeaLevelPressure' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanSeaLevelPressure() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'meanSeaLevelPressureCount' field */
    public java.lang.Integer getMeanSeaLevelPressureCount() {
      return meanSeaLevelPressureCount;
    }
    
    /** Sets the value of the 'meanSeaLevelPressureCount' field */
    public com.my.rdd.NcdcRecord.Builder setMeanSeaLevelPressureCount(int value) {
      validate(fields()[18], value);
      this.meanSeaLevelPressureCount = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'meanSeaLevelPressureCount' field has been set */
    public boolean hasMeanSeaLevelPressureCount() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'meanSeaLevelPressureCount' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanSeaLevelPressureCount() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'meanStationPressure' field */
    public java.lang.Double getMeanStationPressure() {
      return meanStationPressure;
    }
    
    /** Sets the value of the 'meanStationPressure' field */
    public com.my.rdd.NcdcRecord.Builder setMeanStationPressure(double value) {
      validate(fields()[19], value);
      this.meanStationPressure = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'meanStationPressure' field has been set */
    public boolean hasMeanStationPressure() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'meanStationPressure' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanStationPressure() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'meanStationPressureCount' field */
    public java.lang.Integer getMeanStationPressureCount() {
      return meanStationPressureCount;
    }
    
    /** Sets the value of the 'meanStationPressureCount' field */
    public com.my.rdd.NcdcRecord.Builder setMeanStationPressureCount(int value) {
      validate(fields()[20], value);
      this.meanStationPressureCount = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'meanStationPressureCount' field has been set */
    public boolean hasMeanStationPressureCount() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'meanStationPressureCount' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanStationPressureCount() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'meanVisibility' field */
    public java.lang.Double getMeanVisibility() {
      return meanVisibility;
    }
    
    /** Sets the value of the 'meanVisibility' field */
    public com.my.rdd.NcdcRecord.Builder setMeanVisibility(double value) {
      validate(fields()[21], value);
      this.meanVisibility = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'meanVisibility' field has been set */
    public boolean hasMeanVisibility() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'meanVisibility' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanVisibility() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'meanVisibilityCount' field */
    public java.lang.Integer getMeanVisibilityCount() {
      return meanVisibilityCount;
    }
    
    /** Sets the value of the 'meanVisibilityCount' field */
    public com.my.rdd.NcdcRecord.Builder setMeanVisibilityCount(int value) {
      validate(fields()[22], value);
      this.meanVisibilityCount = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'meanVisibilityCount' field has been set */
    public boolean hasMeanVisibilityCount() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'meanVisibilityCount' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanVisibilityCount() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'meanWindSpeed' field */
    public java.lang.Double getMeanWindSpeed() {
      return meanWindSpeed;
    }
    
    /** Sets the value of the 'meanWindSpeed' field */
    public com.my.rdd.NcdcRecord.Builder setMeanWindSpeed(double value) {
      validate(fields()[23], value);
      this.meanWindSpeed = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'meanWindSpeed' field has been set */
    public boolean hasMeanWindSpeed() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'meanWindSpeed' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanWindSpeed() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'meanWindSpeedCount' field */
    public java.lang.Integer getMeanWindSpeedCount() {
      return meanWindSpeedCount;
    }
    
    /** Sets the value of the 'meanWindSpeedCount' field */
    public com.my.rdd.NcdcRecord.Builder setMeanWindSpeedCount(int value) {
      validate(fields()[24], value);
      this.meanWindSpeedCount = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'meanWindSpeedCount' field has been set */
    public boolean hasMeanWindSpeedCount() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'meanWindSpeedCount' field */
    public com.my.rdd.NcdcRecord.Builder clearMeanWindSpeedCount() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'maxSustainedWindSpeed' field */
    public java.lang.Double getMaxSustainedWindSpeed() {
      return maxSustainedWindSpeed;
    }
    
    /** Sets the value of the 'maxSustainedWindSpeed' field */
    public com.my.rdd.NcdcRecord.Builder setMaxSustainedWindSpeed(double value) {
      validate(fields()[25], value);
      this.maxSustainedWindSpeed = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'maxSustainedWindSpeed' field has been set */
    public boolean hasMaxSustainedWindSpeed() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'maxSustainedWindSpeed' field */
    public com.my.rdd.NcdcRecord.Builder clearMaxSustainedWindSpeed() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'maxGustWindSpeed' field */
    public java.lang.Double getMaxGustWindSpeed() {
      return maxGustWindSpeed;
    }
    
    /** Sets the value of the 'maxGustWindSpeed' field */
    public com.my.rdd.NcdcRecord.Builder setMaxGustWindSpeed(double value) {
      validate(fields()[26], value);
      this.maxGustWindSpeed = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'maxGustWindSpeed' field has been set */
    public boolean hasMaxGustWindSpeed() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'maxGustWindSpeed' field */
    public com.my.rdd.NcdcRecord.Builder clearMaxGustWindSpeed() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /** Gets the value of the 'maxTemp' field */
    public java.lang.Double getMaxTemp() {
      return maxTemp;
    }
    
    /** Sets the value of the 'maxTemp' field */
    public com.my.rdd.NcdcRecord.Builder setMaxTemp(double value) {
      validate(fields()[27], value);
      this.maxTemp = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'maxTemp' field has been set */
    public boolean hasMaxTemp() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'maxTemp' field */
    public com.my.rdd.NcdcRecord.Builder clearMaxTemp() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /** Gets the value of the 'maxTempFlag' field */
    public java.lang.CharSequence getMaxTempFlag() {
      return maxTempFlag;
    }
    
    /** Sets the value of the 'maxTempFlag' field */
    public com.my.rdd.NcdcRecord.Builder setMaxTempFlag(java.lang.CharSequence value) {
      validate(fields()[28], value);
      this.maxTempFlag = value;
      fieldSetFlags()[28] = true;
      return this; 
    }
    
    /** Checks whether the 'maxTempFlag' field has been set */
    public boolean hasMaxTempFlag() {
      return fieldSetFlags()[28];
    }
    
    /** Clears the value of the 'maxTempFlag' field */
    public com.my.rdd.NcdcRecord.Builder clearMaxTempFlag() {
      maxTempFlag = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /** Gets the value of the 'minTemp' field */
    public java.lang.Double getMinTemp() {
      return minTemp;
    }
    
    /** Sets the value of the 'minTemp' field */
    public com.my.rdd.NcdcRecord.Builder setMinTemp(double value) {
      validate(fields()[29], value);
      this.minTemp = value;
      fieldSetFlags()[29] = true;
      return this; 
    }
    
    /** Checks whether the 'minTemp' field has been set */
    public boolean hasMinTemp() {
      return fieldSetFlags()[29];
    }
    
    /** Clears the value of the 'minTemp' field */
    public com.my.rdd.NcdcRecord.Builder clearMinTemp() {
      fieldSetFlags()[29] = false;
      return this;
    }

    /** Gets the value of the 'minTempFlag' field */
    public java.lang.CharSequence getMinTempFlag() {
      return minTempFlag;
    }
    
    /** Sets the value of the 'minTempFlag' field */
    public com.my.rdd.NcdcRecord.Builder setMinTempFlag(java.lang.CharSequence value) {
      validate(fields()[30], value);
      this.minTempFlag = value;
      fieldSetFlags()[30] = true;
      return this; 
    }
    
    /** Checks whether the 'minTempFlag' field has been set */
    public boolean hasMinTempFlag() {
      return fieldSetFlags()[30];
    }
    
    /** Clears the value of the 'minTempFlag' field */
    public com.my.rdd.NcdcRecord.Builder clearMinTempFlag() {
      minTempFlag = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /** Gets the value of the 'totalPrecipitation' field */
    public java.lang.Double getTotalPrecipitation() {
      return totalPrecipitation;
    }
    
    /** Sets the value of the 'totalPrecipitation' field */
    public com.my.rdd.NcdcRecord.Builder setTotalPrecipitation(double value) {
      validate(fields()[31], value);
      this.totalPrecipitation = value;
      fieldSetFlags()[31] = true;
      return this; 
    }
    
    /** Checks whether the 'totalPrecipitation' field has been set */
    public boolean hasTotalPrecipitation() {
      return fieldSetFlags()[31];
    }
    
    /** Clears the value of the 'totalPrecipitation' field */
    public com.my.rdd.NcdcRecord.Builder clearTotalPrecipitation() {
      fieldSetFlags()[31] = false;
      return this;
    }

    /** Gets the value of the 'totalPrecipitationFlag' field */
    public java.lang.CharSequence getTotalPrecipitationFlag() {
      return totalPrecipitationFlag;
    }
    
    /** Sets the value of the 'totalPrecipitationFlag' field */
    public com.my.rdd.NcdcRecord.Builder setTotalPrecipitationFlag(java.lang.CharSequence value) {
      validate(fields()[32], value);
      this.totalPrecipitationFlag = value;
      fieldSetFlags()[32] = true;
      return this; 
    }
    
    /** Checks whether the 'totalPrecipitationFlag' field has been set */
    public boolean hasTotalPrecipitationFlag() {
      return fieldSetFlags()[32];
    }
    
    /** Clears the value of the 'totalPrecipitationFlag' field */
    public com.my.rdd.NcdcRecord.Builder clearTotalPrecipitationFlag() {
      totalPrecipitationFlag = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /** Gets the value of the 'snowDepth' field */
    public java.lang.Double getSnowDepth() {
      return snowDepth;
    }
    
    /** Sets the value of the 'snowDepth' field */
    public com.my.rdd.NcdcRecord.Builder setSnowDepth(double value) {
      validate(fields()[33], value);
      this.snowDepth = value;
      fieldSetFlags()[33] = true;
      return this; 
    }
    
    /** Checks whether the 'snowDepth' field has been set */
    public boolean hasSnowDepth() {
      return fieldSetFlags()[33];
    }
    
    /** Clears the value of the 'snowDepth' field */
    public com.my.rdd.NcdcRecord.Builder clearSnowDepth() {
      fieldSetFlags()[33] = false;
      return this;
    }

    /** Gets the value of the 'hasFog' field */
    public java.lang.Boolean getHasFog() {
      return hasFog;
    }
    
    /** Sets the value of the 'hasFog' field */
    public com.my.rdd.NcdcRecord.Builder setHasFog(boolean value) {
      validate(fields()[34], value);
      this.hasFog = value;
      fieldSetFlags()[34] = true;
      return this; 
    }
    
    /** Checks whether the 'hasFog' field has been set */
    public boolean hasHasFog() {
      return fieldSetFlags()[34];
    }
    
    /** Clears the value of the 'hasFog' field */
    public com.my.rdd.NcdcRecord.Builder clearHasFog() {
      fieldSetFlags()[34] = false;
      return this;
    }

    /** Gets the value of the 'hasRain' field */
    public java.lang.Boolean getHasRain() {
      return hasRain;
    }
    
    /** Sets the value of the 'hasRain' field */
    public com.my.rdd.NcdcRecord.Builder setHasRain(boolean value) {
      validate(fields()[35], value);
      this.hasRain = value;
      fieldSetFlags()[35] = true;
      return this; 
    }
    
    /** Checks whether the 'hasRain' field has been set */
    public boolean hasHasRain() {
      return fieldSetFlags()[35];
    }
    
    /** Clears the value of the 'hasRain' field */
    public com.my.rdd.NcdcRecord.Builder clearHasRain() {
      fieldSetFlags()[35] = false;
      return this;
    }

    /** Gets the value of the 'hasSnow' field */
    public java.lang.Boolean getHasSnow() {
      return hasSnow;
    }
    
    /** Sets the value of the 'hasSnow' field */
    public com.my.rdd.NcdcRecord.Builder setHasSnow(boolean value) {
      validate(fields()[36], value);
      this.hasSnow = value;
      fieldSetFlags()[36] = true;
      return this; 
    }
    
    /** Checks whether the 'hasSnow' field has been set */
    public boolean hasHasSnow() {
      return fieldSetFlags()[36];
    }
    
    /** Clears the value of the 'hasSnow' field */
    public com.my.rdd.NcdcRecord.Builder clearHasSnow() {
      fieldSetFlags()[36] = false;
      return this;
    }

    /** Gets the value of the 'hasHail' field */
    public java.lang.Boolean getHasHail() {
      return hasHail;
    }
    
    /** Sets the value of the 'hasHail' field */
    public com.my.rdd.NcdcRecord.Builder setHasHail(boolean value) {
      validate(fields()[37], value);
      this.hasHail = value;
      fieldSetFlags()[37] = true;
      return this; 
    }
    
    /** Checks whether the 'hasHail' field has been set */
    public boolean hasHasHail() {
      return fieldSetFlags()[37];
    }
    
    /** Clears the value of the 'hasHail' field */
    public com.my.rdd.NcdcRecord.Builder clearHasHail() {
      fieldSetFlags()[37] = false;
      return this;
    }

    /** Gets the value of the 'hasThunder' field */
    public java.lang.Boolean getHasThunder() {
      return hasThunder;
    }
    
    /** Sets the value of the 'hasThunder' field */
    public com.my.rdd.NcdcRecord.Builder setHasThunder(boolean value) {
      validate(fields()[38], value);
      this.hasThunder = value;
      fieldSetFlags()[38] = true;
      return this; 
    }
    
    /** Checks whether the 'hasThunder' field has been set */
    public boolean hasHasThunder() {
      return fieldSetFlags()[38];
    }
    
    /** Clears the value of the 'hasThunder' field */
    public com.my.rdd.NcdcRecord.Builder clearHasThunder() {
      fieldSetFlags()[38] = false;
      return this;
    }

    /** Gets the value of the 'hasTornado' field */
    public java.lang.Boolean getHasTornado() {
      return hasTornado;
    }
    
    /** Sets the value of the 'hasTornado' field */
    public com.my.rdd.NcdcRecord.Builder setHasTornado(boolean value) {
      validate(fields()[39], value);
      this.hasTornado = value;
      fieldSetFlags()[39] = true;
      return this; 
    }
    
    /** Checks whether the 'hasTornado' field has been set */
    public boolean hasHasTornado() {
      return fieldSetFlags()[39];
    }
    
    /** Clears the value of the 'hasTornado' field */
    public com.my.rdd.NcdcRecord.Builder clearHasTornado() {
      fieldSetFlags()[39] = false;
      return this;
    }

    @Override
    public NcdcRecord build() {
      try {
        NcdcRecord record = new NcdcRecord();
        record.stationId = fieldSetFlags()[0] ? this.stationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.stationName = fieldSetFlags()[1] ? this.stationName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.stationCity = fieldSetFlags()[2] ? this.stationCity : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.stationState = fieldSetFlags()[3] ? this.stationState : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.stationICAO = fieldSetFlags()[4] ? this.stationICAO : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.stationLatitude = fieldSetFlags()[5] ? this.stationLatitude : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.stationLongitude = fieldSetFlags()[6] ? this.stationLongitude : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.stationElev = fieldSetFlags()[7] ? this.stationElev : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.stationBeginTime = fieldSetFlags()[8] ? this.stationBeginTime : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.stationEndTime = fieldSetFlags()[9] ? this.stationEndTime : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.year = fieldSetFlags()[10] ? this.year : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.month = fieldSetFlags()[11] ? this.month : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.day = fieldSetFlags()[12] ? this.day : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.meanTemp = fieldSetFlags()[13] ? this.meanTemp : (java.lang.Double) defaultValue(fields()[13]);
        record.meanTempCount = fieldSetFlags()[14] ? this.meanTempCount : (java.lang.Integer) defaultValue(fields()[14]);
        record.meanDewPointTemp = fieldSetFlags()[15] ? this.meanDewPointTemp : (java.lang.Double) defaultValue(fields()[15]);
        record.meanDewPointTempCount = fieldSetFlags()[16] ? this.meanDewPointTempCount : (java.lang.Integer) defaultValue(fields()[16]);
        record.meanSeaLevelPressure = fieldSetFlags()[17] ? this.meanSeaLevelPressure : (java.lang.Double) defaultValue(fields()[17]);
        record.meanSeaLevelPressureCount = fieldSetFlags()[18] ? this.meanSeaLevelPressureCount : (java.lang.Integer) defaultValue(fields()[18]);
        record.meanStationPressure = fieldSetFlags()[19] ? this.meanStationPressure : (java.lang.Double) defaultValue(fields()[19]);
        record.meanStationPressureCount = fieldSetFlags()[20] ? this.meanStationPressureCount : (java.lang.Integer) defaultValue(fields()[20]);
        record.meanVisibility = fieldSetFlags()[21] ? this.meanVisibility : (java.lang.Double) defaultValue(fields()[21]);
        record.meanVisibilityCount = fieldSetFlags()[22] ? this.meanVisibilityCount : (java.lang.Integer) defaultValue(fields()[22]);
        record.meanWindSpeed = fieldSetFlags()[23] ? this.meanWindSpeed : (java.lang.Double) defaultValue(fields()[23]);
        record.meanWindSpeedCount = fieldSetFlags()[24] ? this.meanWindSpeedCount : (java.lang.Integer) defaultValue(fields()[24]);
        record.maxSustainedWindSpeed = fieldSetFlags()[25] ? this.maxSustainedWindSpeed : (java.lang.Double) defaultValue(fields()[25]);
        record.maxGustWindSpeed = fieldSetFlags()[26] ? this.maxGustWindSpeed : (java.lang.Double) defaultValue(fields()[26]);
        record.maxTemp = fieldSetFlags()[27] ? this.maxTemp : (java.lang.Double) defaultValue(fields()[27]);
        record.maxTempFlag = fieldSetFlags()[28] ? this.maxTempFlag : (java.lang.CharSequence) defaultValue(fields()[28]);
        record.minTemp = fieldSetFlags()[29] ? this.minTemp : (java.lang.Double) defaultValue(fields()[29]);
        record.minTempFlag = fieldSetFlags()[30] ? this.minTempFlag : (java.lang.CharSequence) defaultValue(fields()[30]);
        record.totalPrecipitation = fieldSetFlags()[31] ? this.totalPrecipitation : (java.lang.Double) defaultValue(fields()[31]);
        record.totalPrecipitationFlag = fieldSetFlags()[32] ? this.totalPrecipitationFlag : (java.lang.CharSequence) defaultValue(fields()[32]);
        record.snowDepth = fieldSetFlags()[33] ? this.snowDepth : (java.lang.Double) defaultValue(fields()[33]);
        record.hasFog = fieldSetFlags()[34] ? this.hasFog : (java.lang.Boolean) defaultValue(fields()[34]);
        record.hasRain = fieldSetFlags()[35] ? this.hasRain : (java.lang.Boolean) defaultValue(fields()[35]);
        record.hasSnow = fieldSetFlags()[36] ? this.hasSnow : (java.lang.Boolean) defaultValue(fields()[36]);
        record.hasHail = fieldSetFlags()[37] ? this.hasHail : (java.lang.Boolean) defaultValue(fields()[37]);
        record.hasThunder = fieldSetFlags()[38] ? this.hasThunder : (java.lang.Boolean) defaultValue(fields()[38]);
        record.hasTornado = fieldSetFlags()[39] ? this.hasTornado : (java.lang.Boolean) defaultValue(fields()[39]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
